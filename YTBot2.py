import os
import asyncio
import re
from telethon import TelegramClient, events
from telethon.tl.custom import Button
from ytmusicapi import YTMusic
import yt_dlp
import logging
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram API (–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
API_ID = os.getenv('API_ID', '23740623')
API_HASH = os.getenv('API_HASH', '79d70c1924d4cbbafcea5b8bcbbd8dc1')
BOT_TOKEN = os.getenv('BOT_TOKEN', '8173348706:AAFvKfdvUxH-9_UhTo2Wo0QMI03pjLVuyAw')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è YTMusic API —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç YTMusic –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ)
ytmusic = YTMusic()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ yt-dlp - –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
ydl_opts_base = {
    'format': 'bestaudio/best',
    'postprocessors': [{
        'key': 'FFmpegExtractAudio',
        'preferredcodec': 'mp3',
        'preferredquality': '192',
    }],
    'outtmpl': 'downloads/%(title)s.%(ext)s',
    'quiet': True,
    'no_warnings': True,
    'writethumbnail': True,
    'embedthumbnail': True,
    # –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å cookies
    'cookiesfrombrowser': ('chrome',),  # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å cookies –∏–∑ Chrome –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    'skip_download_archive': True,  # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–≥—Ä—É–∑–æ–∫
    'extractor_args': {
        'youtube': {
            'player_client': ['android', 'web'],  # –ü–æ–¥–¥–µ–ª—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            'player_skip': ['configs', 'webpage'],  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        }
    },
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ö–æ–¥ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π YouTube
    'nocheckcertificate': True,
    'geo_bypass': True,
    'ignoreerrors': True
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Telegram
client = TelegramClient('music_bot', API_ID, API_HASH)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
if not os.path.exists('downloads'):
    os.makedirs('downloads')

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_search_results = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_current_page = {}

# –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è URL
YOUTUBE_REGEX = r'(https?://)?(www\.)?(youtube|youtu|youtube-nocookie|music\.youtube)\.(com|be)/(watch\?v=|embed/|v/|.+\?v=)?([^&=%\?]{11})'
YOUTUBE_SHORT_REGEX = r'(https?://)?(www\.)?youtu\.be/([^&=%\?]{11})'

@client.on(events.NewMessage(pattern='/start'))
async def start_handler(event):
    await event.respond('–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ—à—É–∫—É —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º—É–∑–∏–∫–∏ –∑ YouTube Music. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –Ω–∞–∑–≤—É –ø—ñ—Å–Ω—ñ –∞–±–æ —á–∞—Å—Ç–∏–Ω—É —Ç–µ–∫—Å—Ç—É, –∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ YouTube, —ñ —è –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∞—É–¥—ñ–æ.')

@client.on(events.NewMessage(pattern='/help'))
async def help_handler(event):
    help_text = """
üéµ –Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º:
1. –ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –Ω–∞–∑–≤—É –ø—ñ—Å–Ω—ñ, —á–∞—Å—Ç–∏–Ω—É —Ç–µ–∫—Å—Ç—É –∞–±–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ YouTube
2. –Ø –∑–Ω–∞–π–¥—É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –ø—ñ—Å–Ω—ñ –Ω–∞ YouTube Music
3. –í–∏–±–µ—Ä—ñ—Ç—å –ø—ñ—Å–Ω—é –∑ –∫–Ω–æ–ø–æ–∫ —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ, —ñ —è –Ω–∞–¥—ñ—à–ª—é –≤–∞–º –∞—É–¥—ñ–æ—Ñ–∞–π–ª

–ö–æ–º–∞–Ω–¥–∏:
/start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É
"""
    await event.respond(help_text)

@client.on(events.CallbackQuery(pattern=r'select_|page_'))
async def callback_handler(event):
    user_id = event.sender_id
    data = event.data.decode('utf-8')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Å–Ω–∏ –∏–ª–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    if data.startswith('select_'):
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–µ—Å–Ω–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏
        index = int(data.split('_')[1])
        
        if user_id not in user_search_results:
            await event.answer('–°–µ—Å—ñ—è –ø–æ—à—É–∫—É –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—è. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ–Ω–∞–π—Ç–µ –Ω–æ–≤–∏–π –ø–æ—à—É–∫.')
            return
        
        search_results = user_search_results[user_id]
        
        if 0 <= index < len(search_results):
            await event.answer('–ü–æ—á–∏–Ω–∞—é –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...')
            await download_and_send_song(event, search_results[index], event.chat_id)
        else:
            await event.answer('–ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.')
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    elif data == 'page_prev' or data == 'page_next':
        if user_id not in user_search_results or user_id not in user_current_page:
            await event.answer('–°–µ—Å—ñ—è –ø–æ—à—É–∫—É –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—è. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ–Ω–∞–π—Ç–µ –Ω–æ–≤–∏–π –ø–æ—à—É–∫.')
            return
        
        current_page = user_current_page[user_id]
        
        if data == 'page_prev' and current_page > 0:
            user_current_page[user_id] = current_page - 1
        elif data == 'page_next':
            total_results = len(user_search_results[user_id])
            total_pages = (total_results + 4) // 5  # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö
            
            if current_page < total_pages - 1:
                user_current_page[user_id] = current_page + 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        original_message = await event.get_message()
        await display_search_page(user_id, original_message)

@client.on(events.NewMessage())
async def message_handler(event):
    if event.text.startswith('/'):
        return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, –æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, URL YouTube –∏–ª–∏ –Ω–µ—Ç
    youtube_url = extract_youtube_url(event.text)
    
    if youtube_url:
        await handle_youtube_url(event, youtube_url)
    else:
        await search_music(event)

def extract_youtube_url(text):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç YouTube URL
    youtube_match = re.search(YOUTUBE_REGEX, text)
    if youtube_match:
        return f"https://www.youtube.com/watch?v={youtube_match.group(6)}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç youtu.be
    youtube_short_match = re.search(YOUTUBE_SHORT_REGEX, text)
    if youtube_short_match:
        return f"https://www.youtube.com/watch?v={youtube_short_match.group(3)}"
    
    return None

async def handle_youtube_url(event, url):
    status_msg = await event.respond('üîÑ –û–±—Ä–æ–±–ª—è—é –ø–æ—Å–∏–ª–∞–Ω–Ω—è...')
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
        with yt_dlp.YoutubeDL({
            'quiet': True,
            'no_warnings': True,
            'extractor_args': ydl_opts_base['extractor_args'],
            'nocheckcertificate': True,
            'geo_bypass': True
        }) as ydl:
            info = ydl.extract_info(url, download=False)
            
        title = info.get('title', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø—ñ—Å–Ω—è')
        artist = info.get('artist', info.get('uploader', '–ù–µ–≤—ñ–¥–æ–º–∏–π –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å'))
        
        await status_msg.edit(f'‚è±Ô∏è –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é **{title}** - {artist}...')
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –±–∞–∑–æ–≤—ã—Ö –æ–ø—Ü–∏–π –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫ –Ω–∏–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        ydl_opts = ydl_opts_base.copy()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∏–¥–µ–æ
        ydl_opts['postprocessor_args'] = [
            '-id3v2_version', '3',
            '-metadata', f'title={title}',
            '-metadata', f'artist={artist}',
        ]
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∑–∞–≥—Ä—É–∑–∫–µ, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(url, download=True)
                filename = ydl.prepare_filename(info).replace('.webm', '.mp3').replace('.m4a', '.mp3')
            
            await status_msg.edit(f'‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ù–∞–¥—Å–∏–ª–∞—é —Ñ–∞–π–ª...')
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
            await client.send_file(
                event.chat_id,
                filename,
                caption=f'üéµ **{title}** - {artist}',
                voice_note=False,
                supports_streaming=True
            )
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            if os.path.exists(filename):
                os.remove(filename)
            
            # –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—Å—Ç–∞—Ç–æ—á–Ω—ã–µ —Ñ–∞–π–ª—ã
            for ext in ['.jpg', '.png', '.webp']:
                thumbnail = filename.rsplit('.', 1)[0] + ext
                if os.path.exists(thumbnail):
                    os.remove(thumbnail)
                    
        except Exception as download_error:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ: {str(download_error)}")
            await status_msg.edit(f'‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –≤—ñ–¥–µ–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ø–æ—à—É–∫ –∑–∞ –Ω–∞–∑–≤–æ—é –ø—ñ—Å–Ω—ñ.')
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ URL: {str(e)}")
        await status_msg.edit(f'‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ URL. YouTube –º–æ–∂–µ –≤–∏–º–∞–≥–∞—Ç–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é. –°–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—å –ø–æ—à—É–∫–æ–º –∑–∞ –Ω–∞–∑–≤–æ—é –ø—ñ—Å–Ω—ñ –∑–∞–º—ñ—Å—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è.')

async def search_music(event):
    search_query = event.text
    chat_id = event.chat_id
    user_id = event.sender_id or event.chat_id
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
    status_msg = await event.respond('üîç –®—É–∫–∞—é –ø—ñ—Å–Ω—ñ –∑–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º...')
    
    try:
        # –ü–æ–∏—Å–∫ –Ω–∞ YouTube Music (–±–µ—Ä–µ–º –±–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏)
        search_results = ytmusic.search(search_query, filter='songs', limit=20)
        
        if not search_results:
            await status_msg.edit('üòï –ù–∞ –∂–∞–ª—å, –∑–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.')
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_search_results[user_id] = search_results
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞–∫ 0 (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
        user_current_page[user_id] = 0
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        await display_search_page(user_id, status_msg)
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞: {str(e)}")
        await status_msg.edit(f'‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.')

async def display_search_page(user_id, message):
    if user_id not in user_search_results or user_id not in user_current_page:
        await message.edit('‚ùå –°–µ—Å—ñ—è –ø–æ—à—É–∫—É –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—è. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ–Ω–∞–π—Ç–µ –Ω–æ–≤–∏–π –ø–æ—à—É–∫.')
        return
    
    search_results = user_search_results[user_id]
    current_page = user_current_page[user_id]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    total_pages = (len(search_results) + 4) // 5  # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö
    
    # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = current_page * 5
    end_idx = min(start_idx + 5, len(search_results))
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    result_message = f'üéµ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É (—Å—Ç–æ—Ä—ñ–Ω–∫–∞ {current_page + 1}/{total_pages}):'
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Å–µ–Ω —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ
    buttons = []
    
    for i in range(start_idx, end_idx):
        result = search_results[i]
        title = result['title']
        artists = ', '.join([artist['name'] for artist in result['artists']])
        
        # –ù–æ–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ (—Å 1)
        item_num = i - start_idx + 1
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Å–Ω–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º
        button_text = f"{item_num}. {title} - {artists}"
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
        if len(button_text) > 60:
            button_text = button_text[:57] + "..."
            
        buttons.append([Button.inline(button_text, data=f"select_{i}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    
    if current_page > 0:
        nav_buttons.append(Button.inline("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", data="page_prev"))
    
    if current_page < total_pages - 1:
        nav_buttons.append(Button.inline("–î–∞–ª—ñ ‚û°Ô∏è", data="page_next"))
    
    if nav_buttons:
        buttons.append(nav_buttons)
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è—è –∫–Ω–æ–ø–∫–∏
    await message.edit(result_message, buttons=buttons)

async def download_and_send_song(event, song_info, chat_id):
    try:
        video_id = song_info['videoId']
        title = song_info['title']
        artists = ', '.join([artist['name'] for artist in song_info['artists']])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        if hasattr(event, 'edit'):
            download_msg = await event.edit(f'‚è±Ô∏è –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é **{title}** - {artists}...')
        else:
            download_msg = await client.send_message(chat_id, f'‚è±Ô∏è –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é **{title}** - {artists}...')
        
        # URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        url = f"https://music.youtube.com/watch?v={video_id}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –±–∞–∑–æ–≤—ã—Ö –æ–ø—Ü–∏–π –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫ –Ω–∏–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        ydl_opts = ydl_opts_base.copy()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∏–¥–µ–æ
        ydl_opts['postprocessor_args'] = [
            '-id3v2_version', '3',
            '-metadata', f'title={title}',
            '-metadata', f'artist={artists}',
        ]
        
        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ —Å –æ–±–ª–æ–∂–∫–æ–π
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(url, download=True)
                filename = ydl.prepare_filename(info).replace('.webm', '.mp3').replace('.m4a', '.mp3')
            
            await download_msg.edit(f'‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ù–∞–¥—Å–∏–ª–∞—é —Ñ–∞–π–ª...')
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
            await client.send_file(
                chat_id,
                filename,
                caption=f'üéµ **{title}** - {artists}',
                voice_note=False,
                supports_streaming=True  # –î–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤ Telegram
            )
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            if os.path.exists(filename):
                os.remove(filename)
            
            # –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—Å—Ç–∞—Ç–æ—á–Ω—ã–µ —Ñ–∞–π–ª—ã
            for ext in ['.jpg', '.png', '.webp']:
                thumbnail = filename.rsplit('.', 1)[0] + ext
                if os.path.exists(thumbnail):
                    os.remove(thumbnail)
            
        except Exception as download_error:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –ø—ñ—Å–Ω—ñ: {str(download_error)}")
            await download_msg.edit(f'‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ. YouTube –≤–∏–º–∞–≥–∞—î –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É –ø—ñ—Å–Ω—é.')
                    
        # –£–¥–∞–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        if hasattr(event, 'sender_id') and event.sender_id in user_search_results:
            del user_search_results[event.sender_id]
            
    except Exception as e:
        logger.error(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ: {str(e)}")
        if hasattr(event, 'edit'):
            await event.edit(f'‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –ø—ñ—Å–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –≤–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É –ø—ñ—Å–Ω—é.')
        else:
            await client.send_message(chat_id, f'‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –ø—ñ—Å–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –≤–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É –ø—ñ—Å–Ω—é.')

async def main():
    await client.start(bot_token=BOT_TOKEN)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è.")
    await client.run_until_disconnected()

if __name__ == '__main__':
    asyncio.run(main())
